{
  "address": "0xcd29aAA74d0B415F616cF88a1EfCc5BdB0da67d2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenB",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        }
      ],
      "name": "LiquidityAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        }
      ],
      "name": "LiquidityRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "spenderAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenAddressIn",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenAddressOut",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "name": "TokensSwapped",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "name": "constructed",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        }
      ],
      "name": "addLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "getPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountAIn",
          "type": "uint256"
        }
      ],
      "name": "swapAforB",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountBIn",
          "type": "uint256"
        }
      ],
      "name": "swapBforA",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x32d7257afd3c5ea4fb312bd199d3f74be9c08992c140a33b3d69d9d9df7e93d5",
  "receipt": {
    "to": null,
    "from": "0x57E1C6AfC5Dfe1b1af5EEdf4FAc218Ea46A43d0a",
    "contractAddress": "0xcd29aAA74d0B415F616cF88a1EfCc5BdB0da67d2",
    "transactionIndex": 0,
    "gasUsed": "794980",
    "logsBloom": "0x
    "blockHash": "0xfd5b9d03a5ca0d9e545325cc1b1b8f0be898c04b6993aa2de52c8ad2684825de",
    "transactionHash": "0x32d7257afd3c5ea4fb312bd199d3f74be9c08992c140a33b3d69d9d9df7e93d5",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 7500424,
        "transactionHash": "0x32d7257afd3c5ea4fb312bd199d3f74be9c08992c140a33b3d69d9d9df7e93d5",
        "address": "0xcd29aAA74d0B415F616cF88a1EfCc5BdB0da67d2",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000057e1c6afc5dfe1b1af5eedf4fac218ea46a43d0a"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xfd5b9d03a5ca0d9e545325cc1b1b8f0be898c04b6993aa2de52c8ad2684825de"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 7500424,
        "transactionHash": "0x32d7257afd3c5ea4fb312bd199d3f74be9c08992c140a33b3d69d9d9df7e93d5",
        "address": "0xcd29aAA74d0B415F616cF88a1EfCc5BdB0da67d2",
        "topics": [
          "0x3f0186f55f2942289aeb5c1daab637831dbe6b21121c8c7f5a22fe382c04ce2e"
        ],
        "data": "0x00000000000000000000000057e1c6afc5dfe1b1af5eedf4fac218ea46a43d0a000000000000000000000000e672ac50701eaa4e600b981d80a085403b2c46b2000000000000000000000000a5b6301d6e63e18ba5753d8b60199110dbab3b09",
        "logIndex": 1,
        "blockHash": "0xfd5b9d03a5ca0d9e545325cc1b1b8f0be898c04b6993aa2de52c8ad2684825de"
      }
    ],
    "blockNumber": 7500424,
    "cumulativeGasUsed": "794980",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xe672aC50701eaa4E600b981D80a085403b2C46B2",
    "0xa5B6301D6E63e18bA5753D8B60199110dBAb3b09"
  ],
  "numDeployments": 2,
  "solcInputHash": "35bf20653b17f3479cc25a0060f86d3c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenB\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"name\":\"LiquidityAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"name\":\"LiquidityRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"spenderAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddressIn\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddressOut\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"TokensSwapped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"constructed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountAIn\",\"type\":\"uint256\"}],\"name\":\"swapAforB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountBIn\",\"type\":\"uint256\"}],\"name\":\"swapBforA\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"defino un tokenA y un tokenB de tipo interface de IERC20. Por otro lado, determino los decimals para cuando tenga que hacer el getprice.\",\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"events\":{\"LiquidityAdded(uint256,uint256)\":{\"details\":\"genero un evento cuando se agrega liquidez.\"},\"LiquidityRemoved(uint256,uint256)\":{\"details\":\"genero un evento cuando se quita liquidez.\"},\"TokensSwapped(address,address,uint256,address,uint256)\":{\"details\":\"genero un evento cuando se realiza un swap.\"}},\"kind\":\"dev\",\"methods\":{\"addLiquidity(uint256,uint256)\":{\"details\":\"addLiquidity: Transfiero desde el owner de los tokens (msg.sender) a este contrato (address(this)). Previo a esto, es preciso que el owner (msg.sender) autorice la transferencia.\"},\"constructor\":{\"details\":\"defino el owner como el msg.sender que crea el usuario.\",\"params\":{\"_tokenA\":\"recibo el address del tokenA.\",\"_tokenB\":\"recibo el address del tokenB.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"removeLiquidity(uint256,uint256)\":{\"details\":\"removeLiquidity: Transfiero los tokens de este contrato al owner (msg.sender).\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"swapAforB(uint256)\":{\"details\":\"en pos de encapsular c\\u00f3digo, swapAforB y swapBforA llaman a una misma funcion privada llamada swap.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SimpleDEX.sol\":\"SimpleDEX\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/SimpleDEX.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// Nahuel Ruiz Mattar\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\n/**\\r\\n    * @dev defino un tokenA y un tokenB de tipo interface de IERC20.\\r\\n    Por otro lado, determino los decimals para cuando tenga que hacer el getprice.\\r\\n*/\\r\\ncontract SimpleDEX is Ownable {\\r\\n\\r\\n    IERC20 private tokenA;\\r\\n    IERC20 private tokenB;\\r\\n    uint256 private decimals = 10**18;    \\r\\n    event constructed(address owner, address tokenA, address tokenB);\\r\\n\\r\\n    /**\\r\\n        * @dev defino el owner como el msg.sender que crea el usuario.\\r\\n        * @param _tokenA recibo el address del tokenA.\\r\\n        * @param _tokenB recibo el address del tokenB.\\r\\n    */\\r\\n    constructor(address _tokenA, address _tokenB) Ownable(msg.sender) {\\r\\n        tokenA = IERC20(_tokenA);\\r\\n        tokenB = IERC20(_tokenB);\\r\\n\\r\\n        emit constructed(msg.sender, address(tokenA), address(tokenB));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        * @dev genero un evento cuando se agrega liquidez.\\r\\n    */\\r\\n    event LiquidityAdded(uint256 amountA, uint256 amountB);\\r\\n\\r\\n    /**\\r\\n        * @dev me aseguro de que ingrese la misma cantidad de tokens A que de tokens B.\\r\\n    */\\r\\n    modifier isAmountEquivalent(uint256 amountA, uint256 amountB)\\r\\n    {\\r\\n        uint256 tokenABalance;\\r\\n        uint256 tokenBBalance;\\r\\n        \\r\\n        (tokenABalance, tokenBBalance) = getBalances();\\r\\n\\r\\n        if (tokenBBalance > 0) //Es 0 cuando es la primera vez y en ese caso no realizo la validaci\\u00f3n.\\r\\n        {\\r\\n            /* Para que se mantenga la equivalencia, el cociente entre la cantidad de A y B del contrato, debe ser igual al del input. \\r\\n            Si tengo 500 TokenA y 1000 Token B y voy a ingresar 250 Token A, tengo que ingresar s\\u00ed o s\\u00ed 500 Token B */        \\r\\n\\r\\n            require(((tokenABalance*decimals)/tokenBBalance) == ((amountA*decimals)/amountB), \\\"The amount must be equivalent\\\");\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        * @dev addLiquidity: Transfiero desde el owner de los tokens (msg.sender) a este contrato (address(this)).\\r\\n        Previo a esto, es preciso que el owner (msg.sender) autorice la transferencia.\\r\\n    */\\r\\n    function addLiquidity(uint256 amountA, uint256 amountB) external onlyOwner() isAmountEquivalent(amountA, amountB) {\\r\\n        //Debo hacer un approve del owner al contrato este.\\r\\n        tokenA.transferFrom(msg.sender, address(this), amountA);\\r\\n        tokenB.transferFrom(msg.sender, address(this), amountB);\\r\\n        emit LiquidityAdded(amountA, amountB);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        * @dev genero un evento cuando se quita liquidez.\\r\\n    */\\r\\n    event LiquidityRemoved(uint256 amountA, uint256 amountB);\\r\\n\\r\\n    /**\\r\\n        * @dev removeLiquidity: Transfiero los tokens de este contrato al owner (msg.sender).\\r\\n    */\\r\\n    function removeLiquidity(uint256 amountA, uint256 amountB) external onlyOwner() isAmountEquivalent(amountA, amountB) {\\r\\n        //Debo hacer un approve del owner al contrato este.\\r\\n        tokenA.transfer(msg.sender, amountA);\\r\\n        tokenB.transfer(msg.sender, amountB);\\r\\n        emit LiquidityRemoved(amountA, amountB);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        * @dev en pos de encapsular c\\u00f3digo, swapAforB y swapBforA llaman a una misma funcion privada llamada swap.\\r\\n    */    \\r\\n    function swapAforB(uint256 amountAIn) external {\\r\\n        swap(address(tokenA), address(tokenB), amountAIn);\\r\\n    }\\r\\n\\r\\n    function swapBforA(uint256 amountBIn) external {\\r\\n        swap(address(tokenB), address(tokenA), amountBIn);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        * @dev genero un evento cuando se realiza un swap.\\r\\n    */\\r\\n    event TokensSwapped(\\r\\n        address spenderAddress,\\r\\n        address tokenAddressIn,\\r\\n        uint256 amountIn,\\r\\n        address tokenAddressOut,\\r\\n        uint256 amountOut\\r\\n    );\\r\\n\\r\\n    /**\\r\\n        * @dev creo una funci\\u00f3n que me devuelva los balances de cada token.\\r\\n    */\\r\\n    function getBalances() private view returns(uint256, uint256)\\r\\n    {\\r\\n        uint256 tokenABalance = tokenA.balanceOf(address(this));\\r\\n        uint256 tokenBBalance = tokenB.balanceOf(address(this));\\r\\n\\r\\n        return (tokenABalance, tokenBBalance);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        * @dev swap se utiliza para realizar los intercambios.\\r\\n        * @param tokenInAddress indica qu\\u00e9 token estoy recibiendo.\\r\\n        * @param tokenOutAddress indica qu\\u00e9 token voy a enviar.\\r\\n        * @param amountIn indica la cantidad de tokens enviados por el usuario.\\r\\n    */\\r\\n    function swap(\\r\\n        address tokenInAddress,\\r\\n        address tokenOutAddress,\\r\\n        uint256 amountIn\\r\\n    ) private {\\r\\n        IERC20 tokenIn;\\r\\n        IERC20 tokenOut;\\r\\n        uint256 amountOut;\\r\\n        uint256 tokenABalance;\\r\\n        uint256 tokenBBalance;\\r\\n\\r\\n        tokenIn = IERC20(tokenInAddress);\\r\\n        tokenOut = IERC20(tokenOutAddress);\\r\\n\\r\\n        //Me aseguro que el sender que hace el swap tenga saldo suficiente de Tokens en su cuenta.\\r\\n        require(\\r\\n            tokenIn.balanceOf(msg.sender) >= amountIn,\\r\\n            \\\"Insufficient balance\\\"\\r\\n        );\\r\\n\\r\\n        //Rescato los saldos de ambos tokens dentro de SimpleDEX.\\r\\n        (tokenABalance, tokenBBalance) = getBalances();\\r\\n\\r\\n        //Transfiero desde el sender que hace el swap la cantidad ingresada del Token.\\r\\n        //Previo a esto, tengo que autorizar a este contrato para realizar la transferencia.\\r\\n        tokenIn.transferFrom(msg.sender, address(this), amountIn);\\r\\n\\r\\n        //Calculo lo que le corresponde del Token B\\r\\n        if (tokenIn == tokenA) {\\r\\n            amountOut =\\r\\n                tokenBBalance - \\r\\n                (tokenABalance * tokenBBalance) / \\r\\n                (tokenABalance + amountIn);\\r\\n        } else {\\r\\n            amountOut =\\r\\n                (tokenABalance * tokenBBalance) /\\r\\n                (tokenBBalance - amountIn) - \\r\\n                tokenABalance;\\r\\n        }\\r\\n\\r\\n        //Le transfiero del Token B al spender\\r\\n        tokenOut.transfer(msg.sender, amountOut);\\r\\n\\r\\n        emit TokensSwapped(\\r\\n            msg.sender,\\r\\n            address(tokenIn),\\r\\n            amountIn,\\r\\n            address(tokenOut),\\r\\n            amountOut\\r\\n        );\\r\\n    }\\r\\n\\r\\n    modifier isTokenAddressValid(address _token) \\r\\n    { \\r\\n        require(((_token == address(tokenA)) || (_token == address(tokenB))), \\\"The address is not valid.\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function getPrice(address _token) external view isTokenAddressValid(_token) returns(uint256)\\r\\n    {\\r\\n        uint256 price = 0;\\r\\n        uint256 tokenABalance;\\r\\n        uint256 tokenBBalance;\\r\\n        (tokenABalance, tokenBBalance) = getBalances();\\r\\n\\r\\n        if (tokenABalance > 0 && tokenBBalance > 0)\\r\\n        {\\r\\n            if (_token == address(tokenA))\\r\\n            {\\r\\n                price = (tokenBBalance * decimals) / tokenABalance;\\r\\n            }\\r\\n            else \\r\\n            {\\r\\n                price = (tokenABalance * decimals) / tokenBBalance;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return price;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xd2c64dd354d6f72bef73ac74a10221a13a62d208762185883ee408c468cdf00c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052670de0b6b3a764000060035534801561001c57600080fd5b50604051610d31380380610d3183398101604081905261003b9161014d565b338061006157604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b61006a816100e1565b50600180546001600160a01b038481166001600160a01b03199283168117909355600280549185169190921681179091556040805133815260208101939093528201527f3f0186f55f2942289aeb5c1daab637831dbe6b21121c8c7f5a22fe382c04ce2e9060600160405180910390a15050610180565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b038116811461014857600080fd5b919050565b6000806040838503121561016057600080fd5b61016983610131565b915061017760208401610131565b90509250929050565b610ba28061018f6000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80639cd441da1161005b5780639cd441da146100eb5780639d7de6b3146100fe578063e4f1f70a14610111578063f2fde38b1461012457600080fd5b806341976e091461008d578063715018a6146100b35780638014a7aa146100bd5780638da5cb5b146100d0575b600080fd5b6100a061009b366004610a4b565b610137565b6040519081526020015b60405180910390f35b6100bb610237565b005b6100bb6100cb366004610a7b565b61024b565b6000546040516001600160a01b0390911681526020016100aa565b6100bb6100f9366004610a94565b61026b565b6100bb61010c366004610a94565b610444565b6100bb61011f366004610a7b565b610605565b6100bb610132366004610a4b565b610622565b60015460009082906001600160a01b038083169116148061016557506002546001600160a01b038281169116145b6101b65760405162461bcd60e51b815260206004820152601960248201527f5468652061646472657373206973206e6f742076616c69642e0000000000000060448201526064015b60405180910390fd5b600080806101c261065d565b909250905081158015906101d65750600081115b1561022d576001546001600160a01b03908116908716036102115781600354826102009190610acc565b61020a9190610ae9565b925061022d565b80600354836102209190610acc565b61022a9190610ae9565b92505b5090949350505050565b61023f61074b565b6102496000610778565b565b600254600154610268916001600160a01b039081169116836107c8565b50565b61027361074b565b818160008061028061065d565b9092509050801561030a57826003548561029a9190610acc565b6102a49190610ae9565b81600354846102b39190610acc565b6102bd9190610ae9565b1461030a5760405162461bcd60e51b815260206004820152601d60248201527f54686520616d6f756e74206d757374206265206571756976616c656e7400000060448201526064016101ad565b6001546040516323b872dd60e01b8152336004820152306024820152604481018890526001600160a01b03909116906323b872dd906064016020604051808303816000875af1158015610361573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103859190610b0b565b506002546040516323b872dd60e01b8152336004820152306024820152604481018790526001600160a01b03909116906323b872dd906064016020604051808303816000875af11580156103dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104019190610b0b565b5060408051878152602081018790527f38f8a0c92f4c5b0b6877f878cb4c0c8d348a47b76d716c8e78f425043df9515b91015b60405180910390a1505050505050565b61044c61074b565b818160008061045961065d565b909250905080156104e35782600354856104739190610acc565b61047d9190610ae9565b816003548461048c9190610acc565b6104969190610ae9565b146104e35760405162461bcd60e51b815260206004820152601d60248201527f54686520616d6f756e74206d757374206265206571756976616c656e7400000060448201526064016101ad565b60015460405163a9059cbb60e01b8152336004820152602481018890526001600160a01b039091169063a9059cbb906044016020604051808303816000875af1158015610534573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105589190610b0b565b5060025460405163a9059cbb60e01b8152336004820152602481018790526001600160a01b039091169063a9059cbb906044016020604051808303816000875af11580156105aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ce9190610b0b565b5060408051878152602081018790527f6f0f96292ae0038c04f9b6bab30f185d9ca02c471d0983f563f2a4f674aef1379101610434565b600154600254610268916001600160a01b039081169116836107c8565b61062a61074b565b6001600160a01b03811661065457604051631e4fbdf760e01b8152600060048201526024016101ad565b61026881610778565b6001546040516370a0823160e01b8152306004820152600091829182916001600160a01b0316906370a0823190602401602060405180830381865afa1580156106aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ce9190610b2d565b6002546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a0823190602401602060405180830381865afa15801561071c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107409190610b2d565b919491935090915050565b6000546001600160a01b031633146102495760405163118cdaa760e01b81523360048201526024016101ad565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040516370a0823160e01b8152336004820152839083906000908190819086906001600160a01b038716906370a0823190602401602060405180830381865afa158015610819573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061083d9190610b2d565b10156108825760405162461bcd60e51b8152602060048201526014602482015273496e73756666696369656e742062616c616e636560601b60448201526064016101ad565b61088a61065d565b6040516323b872dd60e01b81523360048201523060248201526044810189905291935091506001600160a01b038616906323b872dd906064016020604051808303816000875af11580156108e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109069190610b0b565b506001546001600160a01b039081169086160361094c576109278683610b46565b6109318284610acc565b61093b9190610ae9565b6109459082610b59565b9250610978565b816109578783610b59565b6109618385610acc565b61096b9190610ae9565b6109759190610b59565b92505b60405163a9059cbb60e01b8152336004820152602481018490526001600160a01b0385169063a9059cbb906044016020604051808303816000875af11580156109c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e99190610b0b565b50604080513381526001600160a01b038781166020830152818301899052861660608201526080810185905290517f631fb37dba9bbcb8b2f3be2d669e365ae9f1bd850cc57dfe8b7ccd7d979a2bba9181900360a00190a15050505050505050565b600060208284031215610a5d57600080fd5b81356001600160a01b0381168114610a7457600080fd5b9392505050565b600060208284031215610a8d57600080fd5b5035919050565b60008060408385031215610aa757600080fd5b50508035926020909101359150565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417610ae357610ae3610ab6565b92915050565b600082610b0657634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215610b1d57600080fd5b81518015158114610a7457600080fd5b600060208284031215610b3f57600080fd5b5051919050565b80820180821115610ae357610ae3610ab6565b81810381811115610ae357610ae3610ab656fea26469706673582212202bfd7859ac0a92efbef4578a637b3b2fbd45c5e33c670e7558fe19f98a1c090764736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c80639cd441da1161005b5780639cd441da146100eb5780639d7de6b3146100fe578063e4f1f70a14610111578063f2fde38b1461012457600080fd5b806341976e091461008d578063715018a6146100b35780638014a7aa146100bd5780638da5cb5b146100d0575b600080fd5b6100a061009b366004610a4b565b610137565b6040519081526020015b60405180910390f35b6100bb610237565b005b6100bb6100cb366004610a7b565b61024b565b6000546040516001600160a01b0390911681526020016100aa565b6100bb6100f9366004610a94565b61026b565b6100bb61010c366004610a94565b610444565b6100bb61011f366004610a7b565b610605565b6100bb610132366004610a4b565b610622565b60015460009082906001600160a01b038083169116148061016557506002546001600160a01b038281169116145b6101b65760405162461bcd60e51b815260206004820152601960248201527f5468652061646472657373206973206e6f742076616c69642e0000000000000060448201526064015b60405180910390fd5b600080806101c261065d565b909250905081158015906101d65750600081115b1561022d576001546001600160a01b03908116908716036102115781600354826102009190610acc565b61020a9190610ae9565b925061022d565b80600354836102209190610acc565b61022a9190610ae9565b92505b5090949350505050565b61023f61074b565b6102496000610778565b565b600254600154610268916001600160a01b039081169116836107c8565b50565b61027361074b565b818160008061028061065d565b9092509050801561030a57826003548561029a9190610acc565b6102a49190610ae9565b81600354846102b39190610acc565b6102bd9190610ae9565b1461030a5760405162461bcd60e51b815260206004820152601d60248201527f54686520616d6f756e74206d757374206265206571756976616c656e7400000060448201526064016101ad565b6001546040516323b872dd60e01b8152336004820152306024820152604481018890526001600160a01b03909116906323b872dd906064016020604051808303816000875af1158015610361573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103859190610b0b565b506002546040516323b872dd60e01b8152336004820152306024820152604481018790526001600160a01b03909116906323b872dd906064016020604051808303816000875af11580156103dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104019190610b0b565b5060408051878152602081018790527f38f8a0c92f4c5b0b6877f878cb4c0c8d348a47b76d716c8e78f425043df9515b91015b60405180910390a1505050505050565b61044c61074b565b818160008061045961065d565b909250905080156104e35782600354856104739190610acc565b61047d9190610ae9565b816003548461048c9190610acc565b6104969190610ae9565b146104e35760405162461bcd60e51b815260206004820152601d60248201527f54686520616d6f756e74206d757374206265206571756976616c656e7400000060448201526064016101ad565b60015460405163a9059cbb60e01b8152336004820152602481018890526001600160a01b039091169063a9059cbb906044016020604051808303816000875af1158015610534573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105589190610b0b565b5060025460405163a9059cbb60e01b8152336004820152602481018790526001600160a01b039091169063a9059cbb906044016020604051808303816000875af11580156105aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ce9190610b0b565b5060408051878152602081018790527f6f0f96292ae0038c04f9b6bab30f185d9ca02c471d0983f563f2a4f674aef1379101610434565b600154600254610268916001600160a01b039081169116836107c8565b61062a61074b565b6001600160a01b03811661065457604051631e4fbdf760e01b8152600060048201526024016101ad565b61026881610778565b6001546040516370a0823160e01b8152306004820152600091829182916001600160a01b0316906370a0823190602401602060405180830381865afa1580156106aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ce9190610b2d565b6002546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a0823190602401602060405180830381865afa15801561071c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107409190610b2d565b919491935090915050565b6000546001600160a01b031633146102495760405163118cdaa760e01b81523360048201526024016101ad565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040516370a0823160e01b8152336004820152839083906000908190819086906001600160a01b038716906370a0823190602401602060405180830381865afa158015610819573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061083d9190610b2d565b10156108825760405162461bcd60e51b8152602060048201526014602482015273496e73756666696369656e742062616c616e636560601b60448201526064016101ad565b61088a61065d565b6040516323b872dd60e01b81523360048201523060248201526044810189905291935091506001600160a01b038616906323b872dd906064016020604051808303816000875af11580156108e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109069190610b0b565b506001546001600160a01b039081169086160361094c576109278683610b46565b6109318284610acc565b61093b9190610ae9565b6109459082610b59565b9250610978565b816109578783610b59565b6109618385610acc565b61096b9190610ae9565b6109759190610b59565b92505b60405163a9059cbb60e01b8152336004820152602481018490526001600160a01b0385169063a9059cbb906044016020604051808303816000875af11580156109c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e99190610b0b565b50604080513381526001600160a01b038781166020830152818301899052861660608201526080810185905290517f631fb37dba9bbcb8b2f3be2d669e365ae9f1bd850cc57dfe8b7ccd7d979a2bba9181900360a00190a15050505050505050565b600060208284031215610a5d57600080fd5b81356001600160a01b0381168114610a7457600080fd5b9392505050565b600060208284031215610a8d57600080fd5b5035919050565b60008060408385031215610aa757600080fd5b50508035926020909101359150565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417610ae357610ae3610ab6565b92915050565b600082610b0657634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215610b1d57600080fd5b81518015158114610a7457600080fd5b600060208284031215610b3f57600080fd5b5051919050565b80820180821115610ae357610ae3610ab6565b81810381811115610ae357610ae3610ab656fea26469706673582212202bfd7859ac0a92efbef4578a637b3b2fbd45c5e33c670e7558fe19f98a1c090764736f6c63430008140033",
  "devdoc": {
    "details": "defino un tokenA y un tokenB de tipo interface de IERC20. Por otro lado, determino los decimals para cuando tenga que hacer el getprice.",
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "events": {
      "LiquidityAdded(uint256,uint256)": {
        "details": "genero un evento cuando se agrega liquidez."
      },
      "LiquidityRemoved(uint256,uint256)": {
        "details": "genero un evento cuando se quita liquidez."
      },
      "TokensSwapped(address,address,uint256,address,uint256)": {
        "details": "genero un evento cuando se realiza un swap."
      }
    },
    "kind": "dev",
    "methods": {
      "addLiquidity(uint256,uint256)": {
        "details": "addLiquidity: Transfiero desde el owner de los tokens (msg.sender) a este contrato (address(this)). Previo a esto, es preciso que el owner (msg.sender) autorice la transferencia."
      },
      "constructor": {
        "details": "defino el owner como el msg.sender que crea el usuario.",
        "params": {
          "_tokenA": "recibo el address del tokenA.",
          "_tokenB": "recibo el address del tokenB."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "removeLiquidity(uint256,uint256)": {
        "details": "removeLiquidity: Transfiero los tokens de este contrato al owner (msg.sender)."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "swapAforB(uint256)": {
        "details": "en pos de encapsular código, swapAforB y swapBforA llaman a una misma funcion privada llamada swap."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/SimpleDEX.sol:SimpleDEX",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 943,
        "contract": "contracts/SimpleDEX.sol:SimpleDEX",
        "label": "tokenA",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IERC20)877"
      },
      {
        "astId": 946,
        "contract": "contracts/SimpleDEX.sol:SimpleDEX",
        "label": "tokenB",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IERC20)877"
      },
      {
        "astId": 951,
        "contract": "contracts/SimpleDEX.sol:SimpleDEX",
        "label": "decimals",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)877": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}